# requirements.txt
fastapi==0.104.1
uvicorn==0.24.0
python-dotenv==1.0.0
pandas==2.1.3
sqlite3
sqlparse==0.4.4
aiohttp==3.9.1
pydantic==2.5.0
python-multipart==0.0.6
openpyxl==3.1.2

# .env (example)
# Copy this to .env and add your actual API keys
OPENAI_API_KEY=your_openai_api_key_here
DEEPINFRA_API_KEY=your_deepinfra_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# config.py
"""
Configuration settings for the application
"""

import os
from typing import List, Dict, Any

class Config:
    """Application configuration"""
    
    # API Keys
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")
    ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
    
    # Database settings
    TEMP_DIR = "temp"
    MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB
    ALLOWED_EXTENSIONS = {'.csv', '.txt', '.xlsx', '.xls', '.db'}
    
    # LLM settings
    DEFAULT_MODEL_PREFERENCE = "auto"
    FALLBACK_ORDER = ["openai", "anthropic", "deepinfra"]
    
    # API settings
    API_TITLE = "NLtoSQL AI Backend"
    API_VERSION = "1.0.0"
    CORS_ORIGINS = [
        "http://localhost:5173",
        "http://localhost:3000",
        "https://yourdomain.com"
    ]
    
    # Query limits
    MAX_QUERY_LENGTH = 1000
    MAX_RESULTS_LIMIT = 1000
    SQL_TIMEOUT = 30  # seconds
    
    # Logging
    LOG_LEVEL = "INFO"
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    @classmethod
    def get_available_providers(cls) -> List[str]:
        """Get list of providers with API keys configured"""
        providers = []
        if cls.OPENAI_API_KEY:
            providers.append("openai")
        if cls.DEEPINFRA_API_KEY:
            providers.append("deepinfra")
        if cls.ANTHROPIC_API_KEY:
            providers.append("anthropic")
        return providers
    
    @classmethod
    def validate_config(cls) -> Dict[str, Any]:
        """Validate configuration and return status"""
        providers = cls.get_available_providers()
        
        return {
            "valid": len(providers) > 0,
            "providers_configured": providers,
            "total_providers": len(providers),
            "temp_dir_exists": os.path.exists(cls.TEMP_DIR),
            "warnings": [] if len(providers) > 0 else ["No LLM providers configured"]
        }

# docker-compose.yml
version: '3.8'

services:
  nlsql-backend:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./temp:/app/temp
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create temp directory
RUN mkdir -p temp

# Expose port
EXPOSE 8000

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]